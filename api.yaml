openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/MICHELLEALABI/hotelArtichaut/1.0.0
info:
  version: "1.0.0"
  title: "API sécurisée pour l'administration  du site de l'hôtel Artichaut"
  description: >-
    Possibilité de modifier, supprimer ou créer de nouveaux contenus sur la landing page de l'hôtel Artichaut. 
  contact:
    # Un commentaire
    name: Team name 
    email: you@your-company.com

tags: 
  - name: hero
    description: Administration de la section Hero
  - name: promotional_banner
    description: Administration de la bannière promotionnelle
  - name: presentation_video
    description: Administration de la section Vidéo
  - name: room_categories
    description: Administration de la section Chambres
  - name: advantages
    description: Administration de la section Avantages
  - name: reviews
    description: Administration de la section Avis
  - name: news
    description: Administration de la section Actualités
  - name: footer
    description: Administration du footer
  - name: social_media
    description: Administration des réseaux sociaux

paths:
  /home/hero:
    get:
      tags:
        - hero
      summary: Récupération des éléments du Hero
      description: Affiche le Hero
      responses:
        '200':
          description: Hero affiché
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hero'

  /home/hero/{id}:
    post:
      tags:
        - hero
      summary: Modification d'un hero
      description: Modification d'un hero spécifique
      parameters:
        - in: path
          name: id
          required: true
          description: ID du hero à modifier
          schema:
            type: integer
            example: 10
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Hero'
      responses:
        '200':
          description: 'Le hero a bien été modifié'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hero'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

  /home/promotional_banner:
    get:
      tags:
        - promotional_banner
      operationId: getPromotionalBanner
      summary: Renvoie les propriétés de la banière promotionnelle.
      description: Cette méthode ne prend aucun paramètre et permet de consulter les champs de la bannière promotionnelle.
      responses:
        '200':
          description: Champs de la bannière promotionnelle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionalBanner'
  /home/promotional_banner/{id}:
    put:
      tags:
        - promotional_banner
      operationId: updatePromotionalBanner
      summary: Met à jour la bannière promotionnelle.
      description: Cette méthode permet de modifier la bannière promotionnelle.
      parameters:
        - in: path
          name: id
          required: true
          description: ID de la bannière à modifier
          schema:
            type: integer
            example: 10
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PromotionalBanner'
      responses:
        '200':
          description: Bannière mise à jour avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionalBanner'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

  /home/presentation_video:
    get:
      tags:
        - presentation_video
      summary: Récupération des éléments de la section vidéo
      description: >-
        Liste des sections vidéo
      responses:
        '200':
          description: Section vidéo affichées
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationVideo'
                
  /home/presentation_video/{id}:
    post:
      tags:
        - presentation_video
      summary: Création d'une nouvelle section Vidéo
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PresentationVideo'
      responses:
        '200':
          description: 'La section vidéo a bien été modifiée.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationVideo'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

  /home/room_category:
    get:
      tags:
        - room_category
      summary: Récupération des éléments de la section Room Categories
      description: >-
        Liste des éléments de la section Room Categories
      responses:
        '200':
          description: Elements de la section Room Categories affichés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomCategories'

  /home/room_category/{id}:
    post:
      tags:
        - room_category
      summary: Modification d'une nouvelle section room_category
      parameters:
        - in: path
          name: id
          required: true
          description: ID de la catégorie à modifier
          schema:
            type: integer
            example: 10
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RoomCategories'
      responses:
        '200':
          description: 'La catégorie a bien été modifiée'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomCategories'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

  /home/advantages:
    get:
      tags:
        - advantages
      operationId: getAllAdvantages
      summary: Récupère les avantages.
      description: Cette section retourne tous les avantages mis en avant par l'hôtel.
      responses:
        '200':
          description: Renvoie tous les avantages.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Advantages'

  /home/advantages/{id}:
    post:
      tags:
        - advantages
      operationId: updateAdvantage
      summary: Modifie l'un des avantages.
      description: >-
        Cette méthode prend un paramètre (numéro) et met à jour le rang qui correspond à cet ID. 
        Attention, le rang doit contenir tous les champs : aucun ne peut être supprimé sans remplacement.
      parameters:
        - in: path
          name: id
          required: true
          description: Id de l'avantage à modifier
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Advantages'
      responses:
        '200':
          description: 'Avantage mis à jour.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Advantages'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

  /home/reviews:
    get:
      tags:
        - reviews
      operationId: getReviews
      summary: Récupère les avis des visiteurs de l'hôtel.
      description: Cette section retourne tous les avis.
      responses:
        '200':
          description: Avis renvoyés avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'

  /home/reviews/{id}:
    put:
      tags:
        - reviews
      operationId: modifyReviews
      summary: Permet de modifier le champ isDisplayed. L'avis sera affiché si isDisplayed a pour valeur `true`.
      description: Cette section permet de modifier la valeur isDisplayed d'un avis en true ou false.
      parameters:
        - in: path
          name: id
          required: true
          description: ID de l'avis à modifier
          schema:
            type: integer
            example: 10
      responses:
        '200':
          description: Avis modifié avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
        '400':
          description: 'Erreur dans la requête.'
        '404':
          description: 'Ressource non trouvée.'

    post:
      tags:
        - reviews
      operationId: createReview
      summary: Permet de créer une nouvelle Review
      description: >-
        Cette méthode crée une nouvelle Review.
        Attention, le rang doit contenir tous les champs : aucun ne peut être supprimé sans remplacement.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Advantages'
      responses:
        '200':
          description: 'Avantage mis à jour.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

  /home/news:
    get:
      tags:
        - news
      operationId: getAllNews
      summary: Permet de récupérer les éléments de toutes les actualités.
      description: Cette section retourne toutes les actualités de l'hôtel.
      responses:
        '200':
          description: Actualités renvoyées avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'

  /home/news/{id}:
    post:
      tags:
        - news
      operationId: postNews
      summary: Permet de créer une toute nouvelle actualité.
      description: Cette méthode permet de créer une nouvelle actualité en passant tous les champs du modèle actualité.
      parameters:
        - in: path
          name: id
          required: true
          description: Id de la news à modifier
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
      responses:
        '200':
          description: 'Actualité créée.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        '400':
          description: 'Erreur dans la requête.'
        '404':
          description: 'Ressource non trouvée.'

  /home/news/{id}:
    put:
      tags:
        - news
      operationId: updateNews
      summary: Modifie une actualité.
      description: >-
        Cette méthode prend un paramètre (numéro) et met à jour le rang qui correspond à cet ID. 
        Attention, le rang doit contenir tous les champs : aucun ne peut être supprimé sans remplacement.
      parameters:
        - in: path
          name: id
          required: true
          description: Id de la news à modifier
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/News'
      responses:
        '200':
          description: 'Actualité mise à jour.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'


  /home/footer:
    get:
      tags:
        - footer
      operationId: getAllFooter
      summary: Permet de récupérer tous les éléments du footer, hormis les réseaux sociaux.
      description: Cette section retourne toutes les entrées du footer sauf les réseaux sociaux.
      responses:
        '200':
          description: Footer renvoyé avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Footer'

#  /home/footer/{id}:
#    put:
#      tags:
#        - footer
#      operationId: updateFooter
#      summary: Modifie une entrée du footer.
#      description: >-
#        Cette méthode prend un paramètre (numéro) et met à jour le rang qui correspond à cet ID.
#        Attention, le rang doit contenir tous les champs : aucun ne peut être supprimé sans remplacement.
#      parameters:
#        - in: path
#          name: id
#          required: true
#          description: Id de l'avantage à modifier
#          schema:
#            type: integer
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/Footer'
#      responses:
#        '200':
#          description: 'Entrée du footer mise à jour.'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Footer'
#        '400':
#          description: 'La syntaxe de la requête est erronée.'
#        '404':
#          description: 'Ressource non trouvée.'

  /home/social_medias:
    get:
      tags:
        - social_media
      operationId: getAllSocialMedia
      summary: Permet de récupérer tous les éléments des réseaux sociaux.
      description: Cette section retourne toutes les entrées des réseaux sociaux.
      responses:
        '200':
          description: Réseau sociaux renvoyés avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMedia'

#  /home/social_medias/{id}:
#    put:
#      tags:
#        - social_media
#      operationId: updateSocialMedia
#      summary: Modifie une entrée d'un élément des réseaux sociaux..
#      description: >-
#        Cette méthode prend un paramètre (numéro) et met à jour le rang qui correspond à cet ID.
#        Attention, le rang doit contenir tous les champs : aucun ne peut être supprimé sans remplacement.
#      parameters:
#        - in: path
#          name: id
#          required: true
#          description: Id de l'avantage à modifier
#          schema:
#            type: integer
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              $ref: '#/components/schemas/SocialMedia'
#      responses:
#        '200':
#          description: 'Réseau social mis à jour.'
#          content:
#            application/json:
#              schema:
#                $ref: '#/components/schemas/Footer'
#        '400':
#          description: 'La syntaxe de la requête est erronée.'
#        '404':
#          description: 'Ressource non trouvée.'

components:
  schemas: 
    Hero:
      description: Modèle contenant les éléments du hero
      type: object
       
      properties:
        id:
          type: integer
          example: 5
        title:
          type: string
          example: Titre de page
        subtitle:
          type: string
          example: Le sous titre de ma page
        media_url:
          type: string
          example: path/to/the/file
        title_english:
          type: string
          example: The Title
        subtitle_english:
          type: string
          example: The subtitle of may page
        
    PromotionalBanner:
      description: Modèle contenant les éléments de la bannière promotionnelle.
      type: object

      properties:
        id:
          type: integer
          example: 0
        text_french:
          type: string
          example: "Mon texte français"
        text_english:
          type: string
          example: "My english text"

    PresentationVideo:
      description: Modèle contenant les éléments de la section Vidéo
      type: object
       
      properties:
        id:
          type: integer
          example: 4
        video_url:
          type: string
          format: url
          example: 'https://www.hotelArtichaud.com/video1'
        title:
          type: string
          example: Titre de ma vidéo
        title_english:
          type: string
          example: The title in english
        description:
          type: string
          example: La description de la vidéo
        description_english:
          type: string
          example: The description in english

    RoomCategories:
      description: Propriétés des catégories de chambres dans la base de donnée, avec l'url de leur image.

      type: object
      properties:
        id:
          type: integer
        url:
          type: string
        title_french:
          type: string
        title_english:
          type: string
          format: date
        description_french:
          type: string
          format: date
        description_english:
          type: string

    Advantages:
      description: Modèle contenant les éléments de la section Avantages 
      type: object

      properties:
        id:
          type: integer
          example: 3
        icon_url:
          type: string
          example: 'https://fonts.googleapis.com/icon?family=Material+Icons'
        title_french: 
          type: string
          example: "Mon titre en français"
        title_english:
          type: string
          example: "My english title"
        description_french:
          type: string
          example: "Description de mon avantage"
        description_english:
          type: string
          example: "Description of my advantage"
      
    Reviews:
      description: Modèle contenant les éléments d'un avis.
      type: object

      properties:
        id:
          type: integer
          format: int64
          example: 12
        customer_id:
          type: integer
          format: int64
          example: 14
        rating:
          type: number
          format: float
          example: 3.5
        body:
          type: string
          example: "Voilà mon avis"
        is_displayed:
          type: boolean
          example: false
        created_at:
          type: string
          format: timestamp

    News:
      description: Modèle contenant les éléments de la section Actualités
      type: object

      properties:
        id:
          type: integer
          example: 3
        url:
          type: string
          example: 'https://hotelarth.fr/news/98'
        title_french:
          type: string
          example: "Mon titre en français"
        title_english:
          type: string
          example: "My english title"
        description_french:
          type: string
          example: "Description de mon avantage"
        description_english:
          type: string
          example: "Description of my advantage"
        created_at:
          type: string
          format: date-time

    Footer:
      description: Contient les liens qui forment les entrées du footer.
      type: object

      properties:
        id:
          type: integer
          example: 1
        column:
          type: integer
          enum:
            - 0
            - 1
            - 2
        entry_name:
          type: string
          example: 'Ceci est une chaîne de caractère'
        url_redirection:
          type: string
          example: 'http://www.url.com/example'

    SocialMedia:
      description: Icônes et liens des réseaux sociaux.
      type: object

      properties:
        id:
          type: integer
          example: 1
        logo_svg:
          type: string
          example: 'path/to/svg'
        social_url:
          type: string
          example: 'https://www.facebook.com/hotelarth'

  securitySchemes:
    password:
      type: oauth2
      flows:
        password:
          tokenUrl: 'http://example.com/oauth/token'
          scopes:
            write: allows modifying resources
            read: allows reading resources