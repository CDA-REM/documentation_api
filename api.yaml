openapi: 3.0.0
servers:
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/MICHELLEALABI/hotelArtichaut/1.0.0
info:
  version: "1.0.0"
  title: "API sécurisée pour l'administration  du site de l'hôtel Artichaut"
  description: >-
    Possibilité de modifier, supprimer ou créer de nouveaux contenus sur la landing page de l'hôtel Arth.
    Les requêtes peuvent être faites à partir de [Postman](https://www.postman.com).  
    Tous les champs traductibles peuvent être entré avec en clé le nom du champ, et entre crochet le nom de la langue, par exemple
    `title[fr]` et `title[en]`.
  contact:
    # Un commentaire
    name: Team name
    email: you@your-company.com

tags:
  - name: hero
    description: Administration de la section Hero
  - name: promotional_banner
    description: Administration de la bannière promotionnelle
  - name: presentation_video
    description: Administration de la section Vidéo
  - name: room_categories
    description: Administration de la section Chambres
  - name: advantages
    description: Administration de la section Avantages
  - name: reviews
    description: Administration de la section Avis
  - name: news
    description: Administration de la section Actualités
  - name: footer
    description: Administration du footer
  - name: social_media
    description: Administration des réseaux sociaux
  - name: options
    description: Administration des options de réservations possibles
  - name: reservations
    description: Informations de réservation
  - name: users
    description: Informations des utilisateurs

paths:
  /home/hero:
    get:
      tags:
        - hero
      summary: Récupération des éléments du Hero
      description: Affiche le Hero
      responses:
        '200':
          description: Hero affiché
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Hero'


  /home/hero/{id}:
    post:
      tags:
        - hero
      summary: Modification d'un hero
      description: Modification d'un hero spécifique
      parameters:
        - in: path
          name: id
          required: true
          description: Id du hero à modifier
          schema:
            type: string
            example: default-hero
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                media_url:
                  type: string
                  format: binary
                title:
                  $ref: '#/components/schemas/Translatable'
                subtitle:
                  $ref: '#/components/schemas/Translatable'
                media_alt:
                  $ref: '#/components/schemas/Translatable'
      responses:
        '200':
          description: 'Le hero a bien été modifié'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Hero'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

  /home/promotional_banner:
    get:
      tags:
        - promotional_banner
      operationId: getPromotionalBanner
      summary: Renvoie les propriétés de la bannière promotionnelle.
      description: Cette méthode ne prend aucun paramètre et permet de consulter les champs de la bannière promotionnelle.
      responses:
        '200':
          description: Champs de la bannière promotionnelle.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionalBanner'

  /home/promotional_banner/{id}:
    put:
      tags:
        - promotional_banner
      operationId: updatePromotionalBanner
      summary: Met à jour la bannière promotionnelle.
      description: Cette méthode permet de modifier la bannière promotionnelle.
      parameters:
        - in: path
          name: id
          required: true
          description: Id de la bannière à modifier
          schema:
            type: string
            example: default_banner
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PromotionalBanner'
      responses:
        '200':
          description: Bannière mise à jour avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PromotionalBanner'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

  /home/presentation_video:
    get:
      tags:
        - presentation_video
      operationId: getVideo
      summary: Récupération des éléments de la section vidéo
      description: Cette méthode ne prend aucun paramètre et retourne les propriétés de la section video.
      responses:
        '200':
          description: Section vidéo affichée
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationVideo'
        '404':
          description: 'Ressource non trouvée.'

  /home/presentation_video/{id}:
    post:
      tags:
        - presentation_video
      operationId: updateVideo
      summary: Modification d'une section vidéo spécifique
      description: >-
        Cette méthode permet de modifier les propriétés de la section video.
        Elle est utilisée à la place d'une méthode put afin de prendre en charge le média vidéo. 
        Elle prend un paramètre, l'id, et met à jour l'enregistrement correspondant.
        Attention, le rang doit contenir tous les champs : aucun ne peut être supprimé sans remplacement.
      parameters:
        - in: path
          name: id
          required: true
          description: Id de la section vidéo à modifier
          schema:
            type: string
            example: default-presentation_video
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                video_url:
                  type: string
                  format: binary
                title:
                  $ref: '#/components/schemas/Translatable'
                description:
                  $ref: '#/components/schemas/Translatable'
                video_alt:
                  $ref: '#/components/schemas/Translatable'
      responses:
        '200':
          description: 'La section vidéo a bien été modifiée.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationVideo'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'
    get:
      tags:
        - presentation_video
      operationId: getVideo
      summary: Récupérer une section vidéo spécifique
      description: >-
        Cette méthode permet de récupérer les propriétés d'une section vidéo spécifique.
        Elle prend un paramètre, l'id.
      parameters:
        - in: path
          name: id
          required: true
          description: Id de la section vidéo à récupérer
          schema:
            type: string
            example: default-presentation_video
      responses:
        '200':
          description: 'La section vidéo a bien été récupérée.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PresentationVideo'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'
          
  /home/room_category:
    get:
      tags:
        - room_categories
      summary: Récupération des éléments de la section Room Categories
      description: >-
        Liste des éléments de la section Room Categories
      responses:
        '200':
          description: Elements de la section Room Categories affichés
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/RoomCategories'

  /home/room_category/{id}:
    post:
      tags:
        - room_categories
      summary: Modification d'une section room_category
      parameters:
        - in: path
          name: id
          required: true
          description: ID de la catégorie à modifier
          schema:
            type: integer
            example: 10
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                media_url:
                  type: string
                  format: binary
                title:
                  $ref: '#/components/schemas/Translatable'
                subtitle:
                  $ref: '#/components/schemas/Translatable'
                media_alt:
                  $ref: '#/components/schemas/Translatable'
      responses:
        '200':
          description: 'La catégorie a bien été modifiée'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoomCategories'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

  /home/advantages:
    get:
      tags:
        - advantages
      operationId: getAllAdvantages
      summary: Récupère les avantages.
      description: Cette section retourne tous les avantages mis en avant par l'hôtel.
      responses:
        '200':
          description: Renvoie tous les avantages.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Advantages'

  /home/advantages/{id}:
    post:
      tags:
        - advantages
      operationId: updateAdvantage
      summary: Modifie l'un des avantages.
      description: >-
        Cette méthode prend un paramètre (numéro) et met à jour le rang qui correspond à cet ID. 
        Attention, le rang doit contenir tous les champs : aucun ne peut être supprimé sans remplacement.
      parameters:
        - in: path
          name: id
          required: true
          description: Id de l'avantage à modifier
          schema:
            type: integer
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                icon_url:
                  type: string
                  format: binary
                title:
                  $ref: '#/components/schemas/Translatable'
                description:
                  $ref: '#/components/schemas/Translatable'
      responses:
        '200':
          description: 'Avantage mis à jour.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Advantages'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

  /home/reviews:
    get:
      tags:
        - reviews
      operationId: getReviews
      summary: Récupère l'ensemble des avis des visiteurs de l'hôtel.
      description: >-
        Cette route permet de récupérer l'ensemble des avis utilisateurs.
        La requête ne prend aucun paramètre. La réponse retourne les avis des utilisateurs.
      responses:
        '200':
          description: Avis renvoyés avec succès.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Reviews'
        '404':
          description: 'Ressource non trouvée.'
    post:
      tags:
        - reviews
      operationId: createReview
      summary: Crée un avis utilisateur
      description: >-
        Cette méthode permet aux clients ayant séjourné à l'hôtel de laisser un avis.
        Le body de la requête doit contenir les toutes les informations nécessaires à la création d'un avis.
        Par défaut, la propriété is_displayed a pour valeur "0" correspondant à "false".
        L'administrateur pourra la modifier afin de publier l'avis sur la landing page.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reviews'
      responses:
        '200':
          description: 'Avis client enregistré'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
        '400':
          description: 'La syntaxe de la requête est erronée.'

  /home/reviews/{id}:
    put:
      tags:
        - reviews
      operationId: modifyReview
      summary: Modifier un avis client.
      description: >-
        Cette méthode permet à l'administrateur de modifier la valeur isDisplayed : 0 ou 1.
        L'avis sera affiché si isDisplayed a pour valeur 1, correspondant à "true".
        Attention, le rang doit contenir tous les champs : aucun ne peut être supprimé. Seul la propriété 
        is_displayed peut-être modifiée.
      parameters:
        - in: path
          name: id
          required: true
          description: ID de l'avis à modifier
          schema:
            type: integer
            example: 10
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              properties:
                is_displayed:
                  type: boolean
                  example: false
      responses:
        '200':
          description: Avis modifié avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reviews'
        '400':
          description: 'Erreur dans la requête.'
        '404':
          description: 'Ressource non trouvée.'

  /home/news:
    get:
      tags:
        - news
      operationId: getAllNews
      summary: Permet de récupérer les éléments de toutes les actualités.
      description: Cette section retourne toutes les actualités de l'hôtel.
      responses:
        '200':
          description: Actualités renvoyées avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'

    post:
      tags:
        - news
      operationId: updateNews
      summary: Permet de créer une toute nouvelle actualité.
      description: Cette méthode permet de créer une nouvelle actualité en passant tous les champs du modèle actualité.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                media_url:
                  type: string
                  format: binary
                title:
                  $ref: '#/components/schemas/Translatable'
                description:
                  $ref: '#/components/schemas/Translatable'
                media_alt:
                  $ref: '#/components/schemas/Translatable'
      responses:
        '200':
          description: 'Actualité mise à jour.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

  /home/news/{id}:
    post:
      tags:
        - news
      operationId: postNews
      summary: Modifie une actualité.
      description: >-
        Cette méthode prend un paramètre (numéro) et met à jour le rang qui correspond à cet ID. 
        Attention, le rang doit contenir tous les champs : aucun ne peut être supprimé sans remplacement.
      parameters:
        - in: path
          name: id
          required: true
          description: Id de la news à modifier
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                media_url:
                  type: string
                  format: binary
                title:
                  $ref: '#/components/schemas/Translatable'
                description:
                  $ref: '#/components/schemas/Translatable'
                media_alt:
                  $ref: '#/components/schemas/Translatable'
      responses:
        '200':
          description: 'Actualité créée.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/News'
        '400':
          description: 'Erreur dans la requête.'
        '404':
          description: 'Ressource non trouvée.'


  /home/footer:
    post:
      tags:
        - footer
      operationId: createFooter
      summary: Créer une entrée du footer.
      description: >-
        Cette méthode ne prend pas de paramètre et permet de créer un nouveau lien dans le footer.
        Attention, le rang doit contenir tous les champs.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Footer'
      responses:
        '200':
          description: 'Nouvelle entrée du footer créée.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Footer'
        '400':
          description: 'La syntaxe de la requête est erronée.'

    get:
      tags:
        - footer
      operationId: getAllFooter
      summary: Permet de récupérer tous les éléments du footer, hormis les réseaux sociaux.
      description: Cette section retourne toutes les entrées du footer sauf les réseaux sociaux.
      responses:
        '200':
          description: Footer renvoyé avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Footer'
        '400':
          description: 'Erreur dans la requête.'
        '404':
          description: 'Ressource non trouvée.'

  /home/footer/{id}:
    put:
      tags:
        - footer
      operationId: updateFooter
      summary: Modifie une entrée du footer.
      description: >-
        Cette méthode prend un paramètre (numéro) et met à jour le rang qui correspond à cet ID.
        Attention, le rang doit contenir tous les champs : aucun ne peut être supprimé sans remplacement.
      parameters:
        - in: path
          name: id
          required: true
          description: Id du footer à modifier
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Footer'
      responses:
        '200':
          description: 'Entrée du footer mise à jour.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Footer'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

    delete:
      tags:
        - footer
      operationId: deleteFooter
      summary: Supprimer un lien du footer.
      description: >-
        Cette méthode permet de supprimer un lien du footer.
        Elle prend l'id du lien à supprimer en paramètre.
      parameters:
        - in: path
          name: id
          required: true
          description: Id du lien à supprimer.
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Le lien a été supprimé avec succès du footer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Footer'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

  /home/social_medias:
    get:
      tags:
        - social_media
      operationId: getAllSocialMedia
      summary: Permet de récupérer tous les éléments des réseaux sociaux.
      description: Cette section retourne toutes les entrées des réseaux sociaux.
      responses:
        '200':
          description: Réseau sociaux renvoyés avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SocialMedia'

  /home/social_medias/{id}:
    put:
      tags:
        - social_media
      operationId: updateSocialMedia
      summary: Modifie une entrée d'un élément des réseaux sociaux..
      description: >-
        Cette méthode prend un paramètre (numéro) et met à jour le rang qui correspond à cet ID.
        Attention, le rang doit contenir tous les champs : aucun ne peut être supprimé sans remplacement.
      parameters:
        - in: path
          name: id
          required: true
          description: Id du réseau social à modifier
          schema:
            type: integer
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                logo_url:
                  type: string
                  format: binary
                social_url:
                  type: string
                  format: url
                  example: 'https://www.facebook.com/hotelarth'
      responses:
        '200':
          description: 'Réseau social mis à jour.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Footer'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

  /reservation/options:
    get:
      tags:
        - options
      operationId: getAllOptions
      summary: Récupère toutes les options disponibles à la réservation.
      responses:
        '200':
          description: Hero affiché
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Options'

    post:
      tags:
        - options
      operationId: createOptions
      summary: Permet de créer une option
      description: >-
        Cette méthode permet de créer une option de réservation.
        Attention, le rang doit contenir tous les champs : aucun ne peut être supprimé sans remplacement.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Options'
      responses:
        '200':
          description: 'Nouvelle option crée avec succès.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options'
        '400':
          description: 'La syntaxe de la requête est erronée.'

    put:
      tags:
        - options
      operationId: modifyOptions
      summary: Permet de modifier une option
      description: >-
        Cette méthode permet de modifier une option de réservation.
        Attention, le rang doit contenir tous les champs : aucun ne peut être supprimé sans remplacement.
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Options'
      responses:
        '200':
          description: 'Avantage mis à jour.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Options'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'


#  /reservations/availability:
#    get:
#      tags:
#        - reservations
#      operationId: checkAvailability
#      summary : Vérifie la disponibilité d'une réservation
#      description : Vérifie la disponibilité d'une réservation en fonction des dates et des nombres de chambres demandée.
#      requestBody:
#        required: true
#        content:
#          application/json:
#            schema:
#              properties:
#                check-in:
#                  required: true
#                  type: string
#                  format: date
#                  example: "2022-12-06"
#                check-out:
#                  properties:
#                    type: string
#                    format: date
#                    example: "2022-12-06"
#                number_of_rooms:
#                  type: integer
#                  example: 2
#      responses:
#        '200':
#          description: 'Requête passée avec succès'
#          content:
#            application/json:
#              schema:
#                properties:
#                  availability:
#                    type: boolean
#        '400':
#            description: 'Manque de paramètres'

  /reservations:
    post:
      tags:
        - reservations
      operationId: createReservation
      summary: Créer une nouvelle réservation
      description: >-
        Cette méthode permet de créer une nouvelle réservation.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservations'
      responses:
        '200':
          description: 'Nouvelle réservation crée avec succès.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservations'
        '400':
          description: 'La syntaxe de la requête est erronée.'

  /reservations/{id}:
    get:
      tags:
        - reservations
      operationId: updateReservation
      summary: Modifie le statut d'une réservation.
      description: >-
        Cette méthode permet de modifier le statut d'une réservation uniquement.
      parameters:
        - in: path
          name: id
          required: true
          description: Id de la réservation à modifier
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservations'
      responses:
        '200':
          description: 'Réservation modifiée avec succès.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservations'
    put:
      tags:
        - reservations
      operationId: updateReservation
      summary: Modifie le statut d'une réservation.
      description: >-
        Cette méthode permet de modifier le statut d'une réservation uniquement.
      parameters:
        - in: path
          name: id
          required: true
          description: Id de la réservation à modifier
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                status:
                  type: string
                  enum:
                    - "cancelled"
                    - "terminated"
                    - "no-show"
                    - "validated"
      responses:
        '200':
          description: 'Réservation modifiée avec succès.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservations'
        '400':
          description: 'La syntaxe de la requête est erronée.'


  /reservations/user/{user_id}:
    get:
      tags:
        - reservations
      operationId: getReservationHistory
      summary: Permet de voir l'historique de réservation d'un utilisateur.
      description: >-
        Cette méthode permet de consulter l'historique de réservation d'un utilisateur.
      parameters:
        - in: path
          name: user_id
          required: true
          description: Id du User dont on veut l'historique
          schema:
            type: integer
      responses:
        '200':
          description: 'Réservation modifiée avec succès.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservations'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: "La ressource n'existe pas."
  /users/create:
    post:
      tags:
        - users
      operationId: createUser
      summary: Créer un nouveau compte
      description: >-
        Cette méthode permet de créer un compte pour un nouvel utilisateur et d'enregistrer ses informations 
        personnelles.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Users'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        '200':
          description: 'Nouveau compte utilisateur créé avec succès.'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: 'La syntaxe de la requête est erronée.'

  /users/{id}:
    get:
      tags:
        - users
      operationId: getUser
      summary: Récupérer les informations d'un utilisateur.
      description: >-
        Cette méthode permet de récupérer toutes les informations d'un utilisateur de l'application.
        Elle prend l'id de l'utilisateur en paramètre.
      parameters:
        - in: path
          name: id
          required: true
          description: Id de l'utilisateur à récupérer.
          schema:
            type: integer
      responses:
        '200':
          description: Informations renvoyées avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'

    put:
      tags:
        - users
      operationId: modifyUser
      summary: Modifier les informations personnelles d'un utilisateur.
      description: >-
        Cette méthode permet de modifier les informations d'un utilisateur de l'application.
        Elle prend l'id du customer en paramètre. Tous les champs doivent être remplis sauf ceux relatifs à 
        l'employeur qui sont nullables.
      parameters:
        - in: path
          name: id
          required: true
          description: Id de l'utilisateur à récupérer.
          schema:
            type: integer
            example: 2
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Users'
      responses:
        '200':
          description: Informations utilisateur modifiées avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

    delete:
      tags:
        - users
      operationId: deleteUser
      summary: Supprimer les informations personnelles d'un utilisateur.
      description: >-
        Cette méthode permet de supprimer les informations d'un utilisateur.
        Elle prend l'id de utilisateur en paramètre.
      parameters:
        - in: path
          name: id
          required: true
          description: Id de utilisateur à récupérer.
          schema:
            type: integer
            example: 2
      responses:
        '200':
          description: Informations utilisateur supprimées avec succès.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '404':
          description: 'Ressource non trouvée.'

  /login:
    post:
      tags:
        - users
      operationId: logUser
      summary: Connecter un utilisateur
      description: >-
        Cette méthode permet à un utilisateur de l'application de se connecter.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: 'e.green@example.com'
                password:
                  type: string
                  format: password
                  example: 'MotDePassSecret'
      responses:
        '200':
          description: 'Connexion réussie'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Users'
        '400':
          description: 'La syntaxe de la requête est erronée.'
        '401':
          description: 'Accès refusé vérifier les identifiants utilisés.'

components:
  schemas:
    Translatable:
      description: Modèle pour les champs traductibles
      type: object

      properties:
        fr:
          type: string
          example: Du texte français
        en:
          type: string
          example: Some english text

    Hero:
      description: Modèle contenant les éléments du hero
      type: object

      properties:
        id:
          type: integer
          example: 5
        title:
          $ref: '#/components/schemas/Translatable'
        subtitle:
          $ref: '#/components/schemas/Translatable'
        media_url:
          type: string
          format: url
          example: path/to/the/file
        media_alt:
          $ref: '#/components/schemas/Translatable'

    PromotionalBanner:
      description: Modèle contenant les éléments de la bannière promotionnelle.
      type: object

      properties:
        id:
          type: integer
          example: 0
        text:
          $ref: '#/components/schemas/Translatable'

    PresentationVideo:
      description: Modèle contenant les éléments de la section Vidéo
      type: object

      properties:
        id:
          type: integer
          example: 4
        title:
          $ref: '#/components/schemas/Translatable'
        description:
          $ref: '#/components/schemas/Translatable'
        video_url:
          type: string
          format: url
          example: path/to/the/file
        media_alt:
          $ref: '#/components/schemas/Translatable'

    RoomCategories:
      description: Propriétés des catégories de chambres dans la base de donnée, avec l'url de leur image.

      type: object
      properties:
        id:
          type: integer
        media_url:
          type: string
          format: url
          example: /path/to/your/file
        title:
          $ref: '#/components/schemas/Translatable'
        description:
          $ref: '#/components/schemas/Translatable'
        media_alt:
          $ref: '#/components/schemas/Translatable'

    Advantages:
      description: Modèle contenant les éléments de la section Avantages
      type: object

      properties:
        id:
          type: integer
          example: 3
        icon_url:
          type: string
          format: url
          example: 'https://fonts.googleapis.com/icon?family=Material+Icons'
        title:
          $ref: '#/components/schemas/Translatable'
        description:
          $ref: '#/components/schemas/Translatable'

    Reviews:
      description: Modèle contenant les éléments d'un avis.
      type: object

      properties:
        id:
          type: integer
          format: int64
          example: 12
        customer_id:
          type: integer
          format: int64
          example: 14
        rating:
          type: number
          format: integer
          minimum: 1
          maximum: 5
          example: 5
        body:
          type: string
          example: "Voilà mon avis"
        is_displayed:
          type: boolean
          example: false
        created_at:
          type: string
          format: timestamp

    News:
      description: Modèle contenant les éléments de la section Actualités
      type: object

      properties:
        id:
          type: integer
          example: 3
        media_url:
          type: string
          format: url
          example: 'https://hotelarth.fr/news/98'
        media_alt:
          $ref: '#/components/schemas/Translatable'
        title:
          $ref: '#/components/schemas/Translatable'
        description:
          $ref: '#/components/schemas/Translatable'
        created_at:
          type: string
          format: date-time

    Footer:
      description: Contient les liens qui forment les entrées du footer.
      type: object

      properties:
        id:
          type: integer
          example: 1
        column_number:
          type: integer
          enum:
            - 1
            - 2
          example: 1
        entry_name:
          $ref: '#/components/schemas/Translatable'
        url_redirection:
          type: string
          format: url
          example: 'https://www.url.com/example'

    SocialMedia:
      description: Icônes et liens des réseaux sociaux.
      type: object

      properties:
        id:
          type: integer
          example: 1
        logo_svg:
          type: string
          example: 'path/to/svg'
        social_url:
          type: string
          example: 'https://www.facebook.com/hotelarth'

    Reservations:
      description: Une réservation
      properties:
        id:
          type: integer
          example: 1
        user_id:
          type: integer
          example: 1
        number_of_people:
          type: integer
          example: 3
        checkin:
          type: string
          format: date-time
        checkout:
          type: string
          format: date-time
        has_options:
            type: boolean
            example: false
        price:
            type: number
            format: float
        stay_type:
          type: string
          enum:
            - "pro"
            - "personal"
        status:
          type: string
          enum:
            - "cancelled"
            - "terminated"
            - "no-show"
            - "validated"

    Options:
      description: Options disponibles à la réservation.
      type: object
      properties:
        id:
          type: integer
          example: 1
        option_name:
          $ref: '#/components/schemas/Translatable'
        option_price:
          type: number
          example: 30.5

    Users:
      description : >-
        Modèle contenant les propriétés des utilisateurs.
      type: object

      properties:
        id:
          type: integer
          example: 16
        gender:
          type: string
          example: "Monsieur"
        firstname:
          type: string
          example: "Alain"
        lastname:
          type: string
          example: "Deloin"
        email:
          type: string
          format: email
          example: "a.deloin@example.fr"
        phone:
          type: string
          example: "0493565044"
        avatar_url:
          type: string
          example: "assets/avatars/avatar1.png"
        password:
          type: string
          example: d3vin3_mon_p4ssw0rD
        personal_address:
          type: string
          example:
        enterprise_name:
          type: string
          example: "Art' Devlopment"
        professional_address:
          type: string
          example: "4001, boulevard du middleware, 74000 Annecy"
        role:
          type: string
          enum:
            - customer
            - admin
          example: "admin"


  securitySchemes:
    password:
      type: oauth2
      flows:
        password:
          tokenUrl: 'https://example.com/oauth/token'
          scopes:
            write: allows modifying resources
            read: allows reading resources

